JavaScript
    Created: March 1996
    ------> made within 10 days to be exact
    "HTML 페이지르 동적으로 만들고 싶어" --> 가벼운 언어 --> 선능도 좋지 않았다.

    구글 -> 2009 v8 엔진 (브라우저 엔진) 출시

JavaScript 와 Java의 관계?
    Mocha -> LiveScript -> JavaScript
    In conclusion,
    JavaScript has no direct relation to Java besides being used for web technologies. 
    The name choice was a marketing move to encourage adoption.

JavaScript는 인터프리터 언어 
    안녕하세요 -> 컴파일 - 기계어 -> 01010101

    컴파일 언어와는 반대로 변환 과정 없이 소스 코드를 바로 실행하는 포그램 언어
    v8 엔진에 의하여 필요의 따라 컴파일 과정을 거칠 수 있도록 하여 자바스크립트의 성능을 향상

    NaN + a => NaNa 
    JSON (JavaScript Object Notation)
    ---- 데이터 양식 -> 키와 값 
----------------------------------------------------------------

JS 적용법 (HTML 안에 어디에나 둘 수 있지만 위치와 순서가 굉장히 중요합니다)

-내부- (inside an html file)
<html> 
    <script>
        ...JavaScript
    </script>
</html>

-외부- (oustide an html file)[.js 파일을 생성하고 script src 안에 경로를 넣어주시면되요]
*.js
<html>
    ...
    <script src ="경로"></script>
</html>

----------------------------------------------------------------

입출력 [window. = 생략가능]

입력(input)
*console.log()
console.error()
window.alert() 
window.confirm()

출력 (output)
window.prompt()

window -> browser
browser가 없으면 실행이 되지 않습니다.

(window.붙어있는거는 브라우저가 필요해서 js파일에 실행 x)

* 개발중 -> 에러가 생김 -> 어디서 에러가 생겼는지 알 수 있을까? 
    1 --> 10까지 개발

    5 -> console.log(5) -> 잘 나와 -> 6 ~ 10에 범인있다
    8 -> console.log(8) -> 안 나와 -> 6 ~ 8

    -> 개발 중 디버깅을 위해서 로그를 확인할 필요가 있고 이 떼 console.log()를 활용하여
       에러가 난 범위를 좁혀가며 디버깅을 할 수 있다

       단, 디버깅이 끝난 후에는 삭제해주어야 한다. 
----------------------------------------------------------------

.js를 브라우저 환경이 아닌 다른 환경에서 직접 실행할 수 있는 NodeJS 환경에서는 window가 실행되지 않습니다.

NodeJS
    크롬의 V8엔진을 브라우저 바깥으로 꺼내어 JS를 브라우저 외부에서도 실행할 수 있도록 하는 런타임(환경,실행)
    대표적으로 react-js와 같은 js 기반 프레임워크(도구)들이 nodeJS 환경에서 실행한다.

    html대신 js로쓰고
    js를 html안에 직접 작성

    설치
    https://nodejs.org/ko/

    무지성 다음 설치 -> 설치 완료 후 -> vscode 재시작 -> 터미널 -> node-v

----------------------------------------------------------------

자바스크립트 자료형(데이터의 종류, 타입)

원시타입
    string 문자열 (문자)
    boolean 참거짓(T/F)
    undefined (데이터의 타입이 지정되어있지 않은 상태)
    null (값이 명확히 비어있는 상태)
    symbol (이터러블 오브젝트의 키 값으로 사용)

객채타입, 참조타입(집단)
    자바스크립트에서 원시타입을 제외한 모든 것은 객채타입
    하나의 데이터가 아닌 여러 데이터가 집단을 이루고 있는 경우가 많음


=> 아, 자바스크립트에는 이러한 데이터의 종류가 있고, 우리가 이런 데이터를 사용 해야하는거구나

----------------------------------------------------------------

변수
    위의 데이터 타입의 데이터를 직접 기입해서 사용할 수 있지만
    console.log(5) --> 5
    console.log(5+1) --> 6
    console.log(5+1+1) --> 7 --> 바뀔 때 마다 그전에 있던 과정을 다시 작성 

    그러나 해당 데이터를 컴퓨터가 기억하기에 하여 일회성 사용으로 그치지 않고
    그 다음 실행에서도 이어서 실행할 수 있으며, 재사용이 가능하도록 하기 위해 변수를 사용한다

    a = 5;
    console.log(a) --> 5
    a = 5 + 1
    console.log(a) --> 6
    a = a + 1
    console.log(a) --> 7 값이 바뀌어도 기존에 있는 면산을 기억하고 있기 때문에 재사용 

        항상 변하지 않는 값 --> 바뀌지 않지만 재사용하기 위해 사용
        ---
    변수, 삼수
    ---
    변하는 값 ---> 바뀌는 값을 재사용하기 위해 사용

    var, let, const를 이용하여 정의(선언)할 수 있다

    * 자바스크립트에서는 변수를 선언할 떄 자료형을 따로 지정하지 않습니다.
    ex)
        다른 언어
        int a = 5;
            a = "안"(x)

        자바스크립트
        let a = 5;
            a = "안"(o) ---> let:number a = "5" (타입스크립트)

선언
    let 또는 const 변수명 = 값; (선언과 할당)
    
    let 변수명; (선언)
    변수명 = 값; (할당)

    - const는 상수이기 때문에 재활당이 불가능하여 선언과 할당을 ㄷ동시에 해야만 함
    - 반면 let, var는 변수이기 때문에 선언 후 할당이 가능 

----------------------------------------------------------------

var -> 더 이상 사용하지 않습니다.
    ES4를 사용해야하는 전자정부프레임워크 기반의 회사가 아닌 이상 사용하지 않습니다. 


    * let/const 와 var의 차이점
        알아야하는 이유?
            1. 면접
            2. 의도적으로 var

    link to difference explanation:             
        https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/

----------------------------------------------------------------

연신자 
    산술연산자
        (+, -, *, /, %)

        let a = 5;
        let b = 2;
        
        console.log(a+b) // 7
        console.log(a-b) // 3
        console.log(a*b) // 10
        console.log(a/b) // 2.5
        console.log(a%b) // 1

        ----------------------

        let a = 1;
        let b = true;
        (true = 1, false = 0)
        a+b // 2

        a + null = 1
        (null = 0)

        1 + undefined = NaN (Not a Number)

    단항 연산자
        ++ 값이 1 증가
        -- 값이 1 감소
        + 영향 x
        - 음수화

        ex)
            ++a
            -a

    전위 연산자
        ++a - 전위 연산자
        a++ - 후위 연산자 

        let a = 5;
        console.log(++a) --> console.log(), a --> 6
        console.log(a++) --> 6 --> +1
        console.log(a) --> 7

    문자 연결 연산자
        피연산자의 항 중 하나 이상이 문자열인 경우 문자열을 이어서 더해 동작
        "안" + "녕" -> 안녕
        "안녕하세요" - "하세요" -> NaN
        1 + "2" -> "12"
        "1" + 2 -> "12"
        true + "2" -> "true2"
    할당 연산자
        =
            ex) let a = 5;
        +=
            ex) a += 1; --> a = a + 1
            //문자열의 경우 반복문과 함께 자주 사용
        -=
            ex) a -= 1; --> a = a - 1
        *=
            ex) a *= 1; --> a = a * 1
        ...
    우선순위
        10 * (2+2) = 40
----------------------------------------------------------------

    논리 연산자 / 비교 연산자
    true/false 

    비교 연산자
        == 동등비교  -> x == y (x와 y의 값이 같은지)
                    ex) a = 3
                        b = "3
                        a == b // true

        === 일치비교  -> x === y (x와 y의 값과 자료형이 같은지)
                    ex) a === b // false

        != 부등비교   -> x != y (x와 y의 값이 다른지)
                    ex) a != b a랑 b랑 달라? 응, 달라 (true) |  아니 같아(false) 
                        3과 "3" 값이 같음 -> false
        
        !== 불일치비교 -> x !== y (x와 y의 값 혹은 타입이 다른지)
                    ex) a !== b // a와 b는 값과 타입이 모두 달라? 아니 값은 같지만, 타입은 달라 (true)
                        완벽히 일치하지 않은 경우 3 !== 3(false)가 아니라면 true

                        3!==3 (false) -> 외는 true, 완벽히 일치해?

        ex) 
            a = 3
            b = 5

            a == b // false

----------------------------------------------------------------
